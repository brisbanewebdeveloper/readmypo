#!/usr/bin/php
<?php
define('PROGRAM', 'Read My PO');
syslog(LOG_NOTICE, PROGRAM . ': Boot Check');

Class myCurl {

    private $ch;
    private $errors = array();

    public $secret;
    public $deviceId;
    public $messages = array();

    public function open() {
        $this->ch = curl_init();
        curl_setopt($this->ch, CURLOPT_RETURNTRANSFER, true);
    }
    public function close() {
        curl_close($this->ch);
    }

    public function getSettingPath() {
        return $_SERVER['HOME'] . '/Library/Application Support/readmypo';
    }
    public function getSettingFilename($deviceName) {
        return $this->getSettingPath() . "/settings_{$deviceName}.txt";
    }

    public function showErrors() {
        echo implode("\n", $this->errors) . "\n";
        syslog(LOG_CRIT, PROGRAM . ': ' . implode(',', $this->errors));
        $this->errors = array();
    }

    public function register($email, $pass, $deviceName) {

        curl_setopt($this->ch, CURLOPT_URL, 'https://api.pushover.net/1/users/login.json');
        curl_setopt($this->ch, CURLOPT_POSTFIELDS, array(
            'email' => $email,
            'password' => $pass,
        ));
        $result = json_decode(curl_exec($this->ch));
        if ( ! $result->status) {
            $this->errors[] = 'Login Failed';
            return false;
        }
        $this->secret = $result->secret;

        curl_setopt($this->ch, CURLOPT_URL, 'https://api.pushover.net/1/devices.json');
        curl_setopt($this->ch, CURLOPT_POSTFIELDS, array(
            'secret' => $result->secret,
            'name' => $deviceName,
            'os' => 'O',
        ));
        $result = json_decode(curl_exec($this->ch));
        if ( ! $result->status) {
            foreach ($result->errors as $key => $values) {
                foreach ($values as $detail) {
                    $this->errors[] = "{$key}: {$detail}";
                }
            }
            return false;
        }
        $this->deviceId = $result->id;

        return true;
    }

    public function parse($data) {
        $args = array();
        $data->message = escapeshellarg($data->message);
        $args[] = "-message {$data->message}";
        if (isset($data->title)) {
            $data->title = escapeshellarg($data->title);
            $args[] = "-title {$data->title}";
        } else {
            $args[] = "-title 'Read MyPO'";
        }
        if (isset($data->url)) {
            $args[] = "-open '{$data->url}'";
            $args[] = "-subtitle '{$data->url}'";
        }
        return $args;
    }
    public function read() {

        $url = "https://api.pushover.net/1/messages.json?secret={$this->secret}&device_id={$this->deviceId}";
        curl_setopt($this->ch, CURLOPT_URL, $url);
        $result = json_decode(curl_exec($this->ch));
        if ( ! $result->status) {
            foreach ($result->errors as $value) {
                $this->errors[] = $value;
            }
            return false;
        }

        $count = count($result->messages);
        if ($count) {
            foreach ($result->messages as $index => $data) {
                // Read Message
                // var_dump($data);
                $args = $this->parse($data);
                if (count($args)) {
                    syslog(LOG_NOTICE, PROGRAM . ': ' . '/usr/local/bin/terminal-notifier ' . implode(' ', $args));
                    exec('/usr/local/bin/terminal-notifier ' . implode(' ', $args));
                }
                // Delete Message
                $url = "https://api.pushover.net/1/devices/{$this->deviceId}/update_highest_message.json";
                curl_setopt($this->ch, CURLOPT_URL, $url);
                curl_setopt($this->ch, CURLOPT_POSTFIELDS, array(
                    'secret' => $this->secret,
                    'message' => $data->id,
                ));
                $result = json_decode(curl_exec($this->ch));
                // var_dump($result);
            }
        //} else {
        //    // echo "No messages\n";
        //    syslog(LOG_NOTICE, PROGRAM . ': No messages');
        }
        return true;
    }
}




function exitWithUsage($argv) {
    echo "https://github.com/hironozu/readmypo\n";
    echo "Usage 1: {$argv[0]} register <email> <password> <device_name>\n";
    echo "Usage 2: {$argv[0]} read <key> <device_name>\n";
    exit;
}
if (empty($argv[1])) exitWithUsage($argv);

$customClassFile = $_SERVER['HOME'] . '/bin/readmypo';
if (file_exists($customClassFile)) {
    syslog(LOG_NOTICE, PROGRAM . ': Using custom class');
    require_once($customClassFile);
    $myCurl = new myCurlExt;
} else {
    $myCurl = new myCurl;
}

switch ($argv[1]) {
    case 'register':

        if (empty($argv[2])) {
            echo "Email is missing\n";
            exit;
        } else {
            $email = $argv[2];
        }
        if (empty($argv[3])) {
            echo "Password is missing\n";
            exit;
        } else {
            $pass = $argv[3];
        }
        if (empty($argv[4])) {
            echo "Device Name is missing\n";
            exit;
        } else {
            $deviceName = $argv[4];
        }

        $filename = $myCurl->getSettingFilename($deviceName);
        if (file_exists($filename)) {
            echo "Setting File {$filename} exists - Please delete it manually\n";
            exit;
        }

        $myCurl->open();
        $result = $myCurl->register($email, $pass, $deviceName);
        $myCurl->close();
        if ( ! $result) {
            $myCurl->showErrors();
            exit;
        }

        $path = $myCurl->getSettingPath();
        if ( ! file_exists($path)) mkdir($path, 0755, true);
        $data = array(
            'secret' => $myCurl->secret,
            'device_id' => $myCurl->deviceId,
        );


        $key = uniqid();
        $setting = json_encode($data);

        $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
        $iv = mcrypt_create_iv($iv_size, MCRYPT_RAND);
        $ciphertext = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key,
                                     $setting, MCRYPT_MODE_CBC, $iv);
        $ciphertext = $iv . $ciphertext;
        $ciphertext_base64 = base64_encode($ciphertext);

        file_put_contents($filename, $ciphertext_base64);

        echo "Setting is saved to {$filename}\n";
        echo "To read the message run \"readmypo read {$key} {$deviceName}\"\n";

        break;

    case 'read':

        if (empty($argv[2])) {
            echo "Key is missing\n";
            syslog(LOG_NOTICE, PROGRAM . ': Key is missing');
            exit;
        } else {
            $key = $argv[2];
        }
        if (empty($argv[3])) {
            echo "Device Name is missing\n";
            syslog(LOG_NOTICE, PROGRAM . ': Device Name missing');
            exit;
        } else {
            $deviceName = $argv[3];
        }

        $filename = $myCurl->getSettingFilename($deviceName);
        if ( ! file_exists($filename)) {
            echo "Setting file is missing\n";
            syslog(LOG_NOTICE, PROGRAM . ': Setting file is missing');
            exit;
        }

        $ciphertext_dec = base64_decode(file_get_contents($filename));
        $iv_size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);
        $iv_dec = substr($ciphertext_dec, 0, $iv_size);
        $ciphertext_dec = substr($ciphertext_dec, $iv_size);
        $plaintext_dec = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key,
                                        $ciphertext_dec, MCRYPT_MODE_CBC, $iv_dec);

        $setting = json_decode($plaintext_dec);
        if (is_null($setting)) {
            echo "Setting file is broken or key is incorrect\n";
            syslog(LOG_NOTICE, PROGRAM . ': Setting file is broken or key is incorrect');
            exit;
        }

        $myCurl->secret = $setting->secret;
        $myCurl->deviceId = $setting->device_id;

        if (function_exists('pcntl_signal')) {
            function sig_handler($sig_no) {
                echo "Exiting\n";
                syslog(LOG_NOTICE, PROGRAM . ': Exiting');
                $myCurl->close();
            }
            pcntl_signal(SIGTERM, 'sig_handler');
            pcntl_signal(SIGHUP,  'sig_handler');
            pcntl_signal(SIGUSR1, 'sig_handler');
        }

        while (true) {
            $myCurl->open();
            // echo "Reading Message\n";
            $result = $myCurl->read();
            if ( ! $result) {
                $myCurl->showErrors();
                // exit;
            }
            $myCurl->close();
            sleep(6);
        }

        break;

    default:
        exitWithUsage($argv);
}
